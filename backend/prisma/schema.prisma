generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  JOB_SEEKER
  RECRUITER
  EMPLOYER
  ADMIN
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  FILLED
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  username          String             @unique
  passwordHash      String
  role              UserRole           @default(JOB_SEEKER)
  emailVerified     Boolean            @default(false)
  verificationToken String?
  verificationStatus VerificationStatus @default(UNVERIFIED)
  trustScore        Float              @default(0.5)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLoginAt       DateTime?
  
  profile           Profile?
  sentConnections   Connection[]       @relation("Sender")
  receivedConnections Connection[]     @relation("Receiver")
  jobPostings       JobPosting[]
  applications      Application[]
  skills            UserSkill[]
  assessments       SkillAssessment[]
  messages          Message[]
  notifications     Notification[]
  activities        Activity[]
  reports           Report[]
  blockedUsers      BlockedUser[]      @relation("Blocker")
  blockedByUsers    BlockedUser[]      @relation("Blocked")
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName       String
  lastName        String
  headline        String?
  summary         String?
  location        String?
  industry        String?
  avatarUrl       String?
  bannerUrl       String?
  linkedinUrl     String?
  githubUrl       String?
  websiteUrl      String?
  
  experienceYears Int      @default(0)
  openToWork      Boolean  @default(false)
  remoteOnly      Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  experiences     Experience[]
  educations      Education[]
  projects        Project[]
}

model Experience {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  title       String
  company     String
  companyUrl  String?
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Education {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  school      String
  degree      String?
  field       String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          String    @id @default(cuid())
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  name        String
  description String
  url         String?
  githubUrl   String?
  imageUrl    String?
  startDate   DateTime?
  endDate     DateTime?
  current     Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Skill {
  id          String          @id @default(cuid())
  name        String          @unique
  category    String
  description String?
  
  users       UserSkill[]
  jobs        JobSkill[]
  assessments SkillAssessment[]
}

model UserSkill {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillId     String
  skill       Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  level       Int      @default(1) // 1-5 scale
  verified    Boolean  @default(false)
  endorsements Int     @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, skillId])
}

model SkillAssessment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skillId     String
  skill       Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  score       Float
  maxScore    Float
  percentile  Float?
  certificate String?
  expiresAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, skillId])
}

model Connection {
  id          String           @id @default(cuid())
  senderId    String
  sender      User             @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  receiver    User             @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  status      ConnectionStatus @default(PENDING)
  message     String?
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@unique([senderId, receiverId])
}

model JobPosting {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String
  company         String
  companyUrl      String?
  location        String?
  remote          Boolean        @default(false)
  hybrid          Boolean        @default(false)
  
  description     String
  requirements    String?
  responsibilities String?
  benefits        String?
  
  salaryMin       Int?
  salaryMax       Int?
  salaryCurrency  String         @default("USD")
  
  experienceMin   Int            @default(0)
  experienceMax   Int?
  
  status          JobStatus      @default(DRAFT)
  verified        Boolean        @default(false)
  verifiedAt      DateTime?
  
  applicantCount  Int            @default(0)
  viewCount       Int            @default(0)
  
  postedAt        DateTime?
  expiresAt       DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  skills          JobSkill[]
  applications    Application[]
  matches         JobMatch[]
}

model JobSkill {
  id          String     @id @default(cuid())
  jobId       String
  job         JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skillId     String
  skill       Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  required    Boolean    @default(true)
  level       Int?       // Minimum required level
  
  @@unique([jobId, skillId])
}

model Application {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId       String
  job         JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  coverLetter String?
  resumeUrl   String?
  status      String     @default("PENDING")
  
  matchScore  Float?
  aiAnalysis  Json?
  
  appliedAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([userId, jobId])
}

model JobMatch {
  id          String     @id @default(cuid())
  userId      String
  jobId       String
  job         JobPosting @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  matchScore  Float
  reasons     Json
  
  createdAt   DateTime   @default(now())
  
  @@unique([userId, jobId])
  @@index([userId, matchScore])
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  receiverId  String
  
  content     String
  read        Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([receiverId, read])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String
  title       String
  message     String
  data        Json?
  read        Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  
  @@index([userId, read])
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String
  description String
  metadata    Json?
  
  createdAt   DateTime @default(now())
  
  @@index([userId, createdAt])
}

model Report {
  id          String   @id @default(cuid())
  reporterId  String
  reporter    User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  
  targetType  String   // USER, JOB, MESSAGE, etc
  targetId    String
  reason      String
  description String?
  status      String   @default("PENDING")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([targetType, targetId])
}

model BlockedUser {
  id          String   @id @default(cuid())
  blockerId   String
  blocker     User     @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedId   String
  blocked     User     @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  
  reason      String?
  createdAt   DateTime @default(now())
  
  @@unique([blockerId, blockedId])
}